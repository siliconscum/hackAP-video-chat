import socket
import cv2, numpy ,threading

ss = socket.socket(socket.AF_INET , socket.SOCK_STREAM)
cs = socket.socket(socket.AF_INET , socket.SOCK_STREAM)

ss.bind(("192.168.99.1" , 2022))
ss.listen(5)

c_s ,addr = ss.accept()
print ("Connected to - " ,addr)


cs.connect(("192.168.99.1" , 3033))
cs.settimeout(1)

model = cv2.CascadeClassifier(cv2.data.haarcascades +'haarcascade_frontalface_default.xml')
flag = -1
cap = cv2.VideoCapture(0)


def send():
    global flag , cap
    while(True):
        if ( flag == 0):
            break
        try:
            ret,photo=cap.read()
            b_img = cv2.imencode(".jpg" , photo)[1].tobytes()
            c_s.sendall(b_img)
        except:
            continue
    cap.release()
    ss.close()


def receive():
    global flag , cap , model
    count=0
    while(True):
        if (count>10): break
        try:
            mess = cs.recv(100000)
            if (mess):
                nparr = numpy.frombuffer(mess, numpy.uint8)
                img1 = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
                if (not (img1 is None) ):
                    try:
                        face =model.detectMultiScale(img1)
                        if (len(face)==0):
                            pass
                        else:
                            x1=face[0][0]
                            y1=face[0][1]
                            x2=face[0][2]
                            y2=face[0][3]
                        img1 = cv2.rectangle(img1,(x1,y1),(x1+x2,y1+y2),[255,255,255],3)


                    except:
                        pass
                    ret,photo1=cap.read()
                    resized = cv2.resize(photo1, (150,150), interpolation = cv2.INTER_AREA)
                    img1[ 10:160 , 10:160  ] = resized
                    img1 = cv2.rectangle(img1, (0,0), (170,170), (0,0,250), 3)
                    # showing the final images
                    cv2.imshow("From server2",img1)
                    if cv2.waitKey(10) == 13:
                        break


        except:
            count+=1
            continue


    flag = 0
    cv2.destroyAllWindows()
    cs.close()



t1 = threading.Thread(target = receive)
t2 = threading.Thread(target = send)
t1.start()
t2.start()
